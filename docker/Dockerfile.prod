# Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install jq for JSON validation
RUN apk add --no-cache jq

# Copy package files
COPY package*.json ./

# Install dependencies with a clean slate
RUN rm -rf node_modules && \
    npm cache clean --force && \
    npm install --no-package-lock

# Create valid package.json files for corrupted dependencies
RUN mkdir -p node_modules/safe-regex-test && \
    echo '{"name":"safe-regex-test","version":"1.0.0","main":"index.js"}' > node_modules/safe-regex-test/package.json && \
    echo 'module.exports = function safeRegexTest(re, string) { return RegExp.prototype.test.call(re, string); };' > node_modules/safe-regex-test/index.js

RUN mkdir -p node_modules/reusify && \
    echo '{"name":"reusify","version":"1.0.0","main":"index.js"}' > node_modules/reusify/package.json && \
    echo 'module.exports = function reusify(Constructor) { return new Constructor(); };' > node_modules/reusify/index.js

# Copy the rest of the application
COPY . .

# Create public directory if it doesn't exist
RUN mkdir -p public

# Generate Prisma client
RUN npx prisma generate

# Make init-db.sh executable
RUN chmod +x scripts/init-db.sh

# Copy PostCSS files from repo
COPY node_modules/next/node_modules/postcss/lib/symbols.js ./node_modules/next/node_modules/postcss/lib/symbols.js
COPY node_modules/next/node_modules/postcss/lib/terminal-highlight.js ./node_modules/next/node_modules/postcss/lib/terminal-highlight.js
COPY node_modules/next/node_modules/postcss/lib/stringifier.js ./node_modules/next/node_modules/postcss/lib/stringifier.js

# Clean up unnecessary files
RUN rm -rf .next node_modules/.cache

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS runner

WORKDIR /app

# Copy necessary files from builder
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/node_modules/next/node_modules/postcss/lib/symbols.js ./node_modules/next/node_modules/postcss/lib/symbols.js
COPY --from=builder /app/node_modules/next/node_modules/postcss/lib/terminal-highlight.js ./node_modules/next/node_modules/postcss/lib/terminal-highlight.js
COPY --from=builder /app/node_modules/next/node_modules/postcss/lib/stringifier.js ./node_modules/next/node_modules/postcss/lib/stringifier.js

# Install production dependencies with a clean slate
COPY package*.json ./
RUN rm -rf node_modules && \
    npm cache clean --force && \
    npm install --production --no-package-lock

# Create valid package.json files for corrupted dependencies in production
RUN mkdir -p node_modules/safe-regex-test && \
    echo '{"name":"safe-regex-test","version":"1.0.0","main":"index.js"}' > node_modules/safe-regex-test/package.json && \
    echo 'module.exports = function safeRegexTest(re, string) { return RegExp.prototype.test.call(re, string); };' > node_modules/safe-regex-test/index.js

RUN mkdir -p node_modules/reusify && \
    echo '{"name":"reusify","version":"1.0.0","main":"index.js"}' > node_modules/reusify/package.json && \
    echo 'module.exports = function reusify(Constructor) { return new Constructor(); };' > node_modules/reusify/index.js

# Generate Prisma client
RUN npx prisma generate

# Make init-db.sh executable in the runner stage
RUN chmod +x scripts/init-db.sh

# Expose port
EXPOSE 3000

# Start the application
CMD ["node", "server.js"]