# Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install jq and openssl for JSON validation and Prisma
RUN apk add --no-cache jq openssl1.1-compat

# Copy package files
COPY package*.json ./

# Install dependencies with a clean slate
RUN rm -rf node_modules && \
    npm cache clean --force && \
    npm install --force --no-package-lock && \
    npm install openai --force --no-package-lock

# Copy the rest of the application
COPY . .

# Create public directory if it doesn't exist
RUN mkdir -p public

# Install Prisma client and generate
RUN npm install @prisma/client --force --no-package-lock && \
    npx prisma generate

# Make init-db.sh executable
RUN chmod +x scripts/init-db.sh

# Clean up unnecessary files
RUN rm -rf .next node_modules/.cache

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS runner

WORKDIR /app

# Install openssl for Prisma
RUN apk add --no-cache openssl1.1-compat

# Copy necessary files from builder
COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/scripts ./scripts

# Install production dependencies with a clean slate
COPY package*.json ./
RUN rm -rf node_modules && \
    npm cache clean --force && \
    npm install --production --force --no-package-lock && \
    npm install @prisma/client openai --force --no-package-lock

# Generate Prisma client
RUN npx prisma generate

# Make init-db.sh executable in the runner stage
RUN chmod +x scripts/init-db.sh

# Expose port
EXPOSE 3000

# Start the application
CMD ["node", "server.js"]