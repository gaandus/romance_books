# Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY ../package*.json ./
COPY ../.npmrc ./

# Copy prisma schema
COPY ../prisma ./prisma/

# Install dependencies
RUN npm install --no-cache \
    rimraf@latest \
    glob@latest \
    eslint@latest \
    @typescript-eslint/parser@latest \
    @typescript-eslint/eslint-plugin@latest \
    lru-cache@latest

# Install project dependencies
RUN npm install --no-cache openai@4.28.0

# Copy the rest of the application
COPY ../ .

# Create public directory if it doesn't exist
RUN mkdir -p public

# Generate Prisma client
RUN npx prisma generate

# Make init-db.sh executable
RUN chmod +x scripts/init-db.sh

# Clean up
RUN rm -rf .next
RUN rm -rf node_modules/.cache

# Build the application
RUN npm run build

# Runner stage
FROM node:20-alpine AS runner

# Set working directory
WORKDIR /app

# Copy package files
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/.npmrc ./

# Copy prisma schema
COPY --from=builder /app/prisma ./prisma

# Copy built application
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/data ./data
COPY --from=builder /app/app ./app

# Make init-db.sh executable
RUN chmod +x scripts/init-db.sh

# Expose port
EXPOSE 3000

# Start the application
CMD ["npm", "start"]